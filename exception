import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;

import com.google.api.services.calendar.Calendar;

import com.google.api.services.calendar.model.*;

import org.springframework.boot.SpringApplication;

import org.springframework.boot.autoconfigure.SpringBootApplication;

import org.springframework.boot.autoconfigure.security.oauth2.client.EnableOAuth2Sso;

import org.springframework.context.annotation.Bean;

import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;

import org.springframework.security.oauth2.client.OAuth2AuthorizedClientId;

import org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;

import org.springframework.security.oauth2.client.registration.ClientRegistration;

import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;

import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;

import org.springframework.security.oauth2.core.AuthorizationGrantType;

import org.springframework.security.oauth2.core.ClientAuthenticationMethod;

import org.springframework.web.bind.annotation.GetMapping;

import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;

import java.security.GeneralSecurityException;

import java.util.Arrays;

@SpringBootApplication

@RestController

@EnableOAuth2Sso

public class GoogleCalendarApplication {

    private static final String APPLICATION_NAME = "Your Application Name";

    private static final String CLIENT_REGISTRATION_ID = "google";

    private static final String CALENDAR_ID = "primary";

    public static void main(String[] args) {

        SpringApplication.run(GoogleCalendarApplication.class, args);

    }

    @Bean

    public ClientRegistrationRepository clientRegistrationRepository() {

        return new CustomClientRegistrationRepository();

    }

    @Bean

    public OAuth2AuthorizedClientRepository authorizedClientRepository() {

        return new CustomOAuth2AuthorizedClientRepository();

    }

    @GetMapping("/")

    public String createEvent(@RegisteredOAuth2AuthorizedClient("google") OAuth2AuthorizedClient authorizedClient) {

        try {

            Calendar service = createCalendarService(authorizedClient.getAccessToken().getTokenValue());

            Event event = new Event()

                    .setSummary("Google I/O 2015")

                    .setLocation("800 Howard St., San Francisco, CA 94103")

                    .setDescription("A chance to hear more about Google's developer products.");

            DateTime startDateTime = new DateTime("2015-05-28T09:00:00-07:00");

            EventDateTime start = new EventDateTime()

                    .setDateTime(startDateTime)

                    .setTimeZone("America/Los_Angeles");

            event.setStart(start);

            DateTime endDateTime = new DateTime("2015-05-28T17:00:00-07:00");

            EventDateTime end = new EventDateTime()

                    .setDateTime(endDateTime)

                    .setTimeZone("America/Los_Angeles");

            event.setEnd(end);

            String[] recurrence = new String[]{"RRULE:FREQ=DAILY;COUNT=2"};

            event.setRecurrence(Arrays.asList(recurrence));

            EventAttendee[] attendees = new EventAttendee[]{

                    new EventAttendee().setEmail("lpage@example.com"),

                    new EventAttendee().setEmail("sbrin@example.com"),

            };

            event.setAttendees(Arrays.asList(attendees));

            EventReminder[] reminderOverrides = new EventReminder[]{

                    new EventReminder().setMethod("email").setMinutes(24 * 60),

                    new EventReminder().setMethod("popup").setMinutes(10),

            };

            Event.Reminders reminders = new Event.Reminders()

                    .setUseDefault(false)

                    .setOverrides(Arrays.asList(reminderOverrides));

            event.setReminders(reminders);

            event = service.events().insert(CALENDAR_ID, event).execute();

            return "Event created: " + event.getHtmlLink();

        } catch (IOException | GeneralSecurityException e) {

            e.printStackTrace();

            return "Error creating event";

        }

    }

    private Calendar createCalendarService(String accessToken) throws IOException, GeneralSecurityException {

        GoogleCredential credential = new GoogleCredential().setAccessToken(accessToken);

        return new Calendar.Builder(credential.getTransport(), credential.getJsonFactory())

                .setApplicationName(APPLICATION_NAME)

                .build();

    }

    private static class CustomClientRegistrationRepository implements ClientRegistrationRepository {

        @Override

        public ClientRegistration findByRegistrationId(String registrationId) {

            return ClientRegistration.withRegistrationId(CLIENT_REGISTRATION_ID)

                    .clientId("YOUR_CLIENT_ID")

                    .clientSecret("YOUR_CLIENT_SECRET")

                    .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)

                    .redirectUriTemplate("{baseUrl}/login/oauth2/code/{registrationId}")

                    .authorizationUri("https://accounts.google.com/o/oauth2/auth")

                    .tokenUri("https://accounts.google.com/o/oauth2/token")

                    .userInfoUri("https://www.googleapis.com/oauth2/v3/userinfo")

                    .clientAuthenticationMethod(ClientAuthenticationMethod.BASIC)

                    .scope("https://www.googleapis.com/auth/calendar")

                    .jwkSetUri("https://www.googleapis.com/oauth2/v3/certs")

                    .clientName("Google")

                    .build();

        }

    }

    private static class CustomOAuth2AuthorizedClientRepository implements OAuth2AuthorizedClientRepository {

        @Override

        public void saveAuthorizedClient(OAuth2AuthorizedClient authorizedClient, OAuth2AuthenticationToken authentication) {

            // No need to save the authorized client

        }

        @Override

        public void removeAuthorizedClient(String clientRegistrationId, OAuth2AuthenticationToken authentication) {

            // No need to remove the authorized client

        }

        @Override

        public OAuth2AuthorizedClient loadAuthorizedClient(String clientRegistrationId, OAuth2AuthenticationToken authentication) {

            // Return null to let Spring use the ClientRegistrationRepository to load the client

            return null;

        }

    }

}


















<dependencies>

    <!-- Spring Boot Starter Web -->

    <dependency>

        <groupId>org.springframework.boot</groupId>

        <artifactId>spring-boot-starter-web</artifactId>

    </dependency>

    <!-- Google Calendar API -->

    <dependency>

        <groupId>com.google.api-client</groupId>

        <artifactId>google-api-client</artifactId>

        <version>1.31.1</version>

    </dependency>

    <dependency>

        <groupId>com.google.oauth-client</groupId>

        <artifactId>google-oauth-client-jetty</artifactId>

        <version>1.31.1</version>

    </dependency>

</dependencies>









import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;

import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;

import com.google.api.client.http.HttpTransport;

import com.google.api.client.json.JsonFactory;

import com.google.api.client.json.jackson2.JacksonFactory;

import com.google.api.services.calendar.Calendar;

import com.google.api.services.calendar.model.*;

import java.io.IOException;

import java.security.GeneralSecurityException;

import java.util.Arrays;

public class GoogleCalendarApplication {

    private static final String APPLICATION_NAME = "Your Application Name";

    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();

    private static final String CREDENTIALS_FILE_PATH = "/path/to/your/credentials.json";

    public static void main(String[] args) {

        try {

            HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();

            GoogleCredential credential = GoogleCredential.fromStream(

                    GoogleCalendarApplication.class.getResourceAsStream(CREDENTIALS_FILE_PATH))

                    .createScoped(Arrays.asList("https://www.googleapis.com/auth/calendar"));

            Calendar service = new Calendar.Builder(httpTransport, JSON_FACTORY, credential)

                    .setApplicationName(APPLICATION_NAME)

                    .build();

            Event event = new Event()

                    .setSummary("Google I/O 2015")

                    .setLocation("800 Howard St., San Francisco, CA 94103")

                    .setDescription("A chance to hear more about Google's developer products.");

            DateTime startDateTime = new DateTime("2015-05-28T09:00:00-07:00");

            EventDateTime start = new EventDateTime()

                    .setDateTime(startDateTime)

                    .setTimeZone("America/Los_Angeles");

            event.setStart(start);

            DateTime endDateTime = new DateTime("2015-05-28T17:00:00-07:00");

            EventDateTime end = new EventDateTime()

                    .setDateTime(endDateTime)

                    .setTimeZone("America/Los_Angeles");

            event.setEnd(end);

            String[] recurrence = new String[]{"RRULE:FREQ=DAILY;COUNT=2"};

            event.setRecurrence(Arrays.asList(recurrence));

            EventAttendee[] attendees = new EventAttendee[]{

                    new EventAttendee().setEmail("lpage@example.com"),

                    new EventAttendee().setEmail("sbrin@example.com"),

            };

            event.setAttendees(Arrays.asList(attendees));

            EventReminder[] reminderOverrides = new EventReminder[]{

                    new EventReminder().setMethod("email").setMinutes(24 * 60),

                    new EventReminder().setMethod("popup").setMinutes(10),

            };

            Event.Reminders reminders = new Event.Reminders()

                    .setUseDefault(false)

                    .setOverrides(Arrays.asList(reminderOverrides));

            event.setReminders(reminders);

            String calendarId = "primary";

            event = service.events().insert(calendarId, event).execute();

            System.out.printf("Event created: %s\n", event.getHtmlLink());

        } catch (IOException | GeneralSecurityException e) {

            e.printStackTrace();

        }

    }

}

Event event = new Event()
    .setSummary("Google I/O 2015")
    .setLocation("800 Howard St., San Francisco, CA 94103")
    .setDescription("A chance to hear more about Google's developer products.");

DateTime startDateTime = new DateTime("2015-05-28T09:00:00-07:00");
EventDateTime start = new EventDateTime()
    .setDateTime(startDateTime)
    .setTimeZone("America/Los_Angeles");
event.setStart(start);

DateTime endDateTime = new DateTime("2015-05-28T17:00:00-07:00");
EventDateTime end = new EventDateTime()
    .setDateTime(endDateTime)
    .setTimeZone("America/Los_Angeles");
event.setEnd(end);

String[] recurrence = new String[] {"RRULE:FREQ=DAILY;COUNT=2"};
event.setRecurrence(Arrays.asList(recurrence));

EventAttendee[] attendees = new EventAttendee[] {
    new EventAttendee().setEmail("lpage@example.com"),
    new EventAttendee().setEmail("sbrin@example.com"),
};
event.setAttendees(Arrays.asList(attendees));

EventReminder[] reminderOverrides = new EventReminder[] {
    new EventReminder().setMethod("email").setMinutes(24 * 60),
    new EventReminder().setMethod("popup").setMinutes(10),
};
Event.Reminders reminders = new Event.Reminders()
    .setUseDefault(false)
    .setOverrides(Arrays.asList(reminderOverrides));
event.setReminders(reminders);

String calendarId = "primary";
event = service.events().insert(calendarId, event).execute();
System.out.printf("Event created: %s\n", event.getHtmlLink());






























import React, { useState } from 'react';

const MyComponent = () => {

  const [state1, setState1] = useState('Hello');

  const [state2, setState2] = useState('World');

  return (

    <div>

      <button onClick={() => setState1('Goodbye')}>Update State 1</button>

      <button onClick={() => setState2('React')}>Update State 2</button>

      {state1 === 'Hello' && <p>{state2}</p>}

      {state1 === 'Goodbye' && <p>{state2.toUpperCase()}</p>}

    </div>

  );

};

export default MyComponent;










import React, { useState } from 'react';

function MyComponent() {

  const [htmlContent, setHtmlContent] = useState('');

  const handleStoreHTML = () => {

    const newHtmlContent = `

      <h1>Hello, World!</h1>

      <p>This is a paragraph.</p>

      <ul>

        <li>Item 1</li>

        <li>Item 2</li>

        <li>Item 3</li>

      </ul>

    `;

    setHtmlContent(newHtmlContent);

  };

  return (

    <div>

      <button onClick={handleStoreHTML}>Store HTML Content</button>

      <div style={{ whiteSpace: 'pre-wrap' }}>{htmlContent}</div>

    </div>

  );

}







function MyComponent() {

  const [htmlContent, setHtmlContent] = useState('');

  const handleButtonClick = () => {

    const newContent = '<h1>Hello, World!</h1>'; // Example HTML content

    setHtmlContent(newContent);

  };

  return (

    <div>

      <button onClick={handleButtonClick}>Set HTML Content</button>

      <div dangerouslySetInnerHTML={{ __html: htmlContent }}></div>

    </div>

  );

}










import org.springframework.mail.SimpleMailMessage;

import org.springframework.mail.javamail.JavaMailSender;

import org.springframework.stereotype.Service;

@Service

public class EmailService {

    private final JavaMailSender mailSender;

    public EmailService(JavaMailSender mailSender) {

        this.mailSender = mailSender;

    }

    public void sendEmail(String recipient, String subject, String body) {

        SimpleMailMessage message = new SimpleMailMessage();

        message.setTo(recipient);

        message.setSubject(subject);

        message.setText(body);

        mailSender.send(message);

    }

}

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class EmailController {

    private final EmailService emailService;

    public EmailController(EmailService emailService) {
        this.emailService = emailService;
    }

    @PostMapping("/send-emails")
    public void sendEmails(@RequestBody EmailData emailData) {
        // Send email to mental counselor
        emailService.sendEmail(emailData.getMentalCounselorEmail(), "New Email from User", emailData.getMessageToCounselor());

        // Send email to user
        emailService.sendEmail(emailData.getUserEmail(), "Confirmation Email", emailData.getMessageToUser());
    }
}


# Gmail SMTP server configuration

spring.mail.host=smtp.gmail.com

spring.mail.port=587

spring.mail.username=your-gmail-account@gmail.com

spring.mail.password=your-gmail-account-password

# Additional properties for Gmail

spring.mail.properties.mail.smtp.auth=true

spring.mail.properties.mail.smtp.starttls.enable=true

spring.mail.properties.mail.smtp.starttls.required=true

spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com

spring.mail.properties.mail.smtp.connectiontimeout=5000

spring.mail.properties.mail.smtp.timeout=5000

spring.mail.properties.mail.smtp.writetimeout=5000




























function Card({ record }) {

  return (

    <div className="card">

      <h3>{record.title}</h3>

      {record.condition ? <p>{record.details}</p> : null}

    </div>

  );

}

function MyComponent() {

  const [data, setData] = useState([]);

  useEffect(() => {

    // Fetch data from the API endpoint

    axios.get('https://api.example.com/data')

      .then(response => {

        setData(response.data);

      })

      .catch(error => {

        console.log(error);

      });

  }, []);

  // Filter the data based on the condition

  const filteredData = data.filter(item => item.status === 1);

  return (

    <div>

      {filteredData.map(item => (

        <Card key={item.id} record={item} />

      ))}

    </div>

  );

}


















import { useEffect } from 'react';

const MyComponent = () => {

  useEffect(() => {

    const navigationEntries = window.performance.getEntriesByType('navigation');

    const isReloaded = navigationEntries.length && navigationEntries[0].type === 'reload';

    if (isReloaded) {

      // Code to execute after page reload

      console.log('Page reloaded!');

    }

  }, []);

  return <div>My Component</div>;

};

export default MyComponent;




Access to XMLHttpRequest at 'http://localhost:9090/findMC/rohit@gmail.com' from origin 'http://localhost:4000'
has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' 
header is present on the requested resource.










