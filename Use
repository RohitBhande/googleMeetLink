import axios from 'axios';
import React, {  useState } from 'react'
import { useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import '../Style/Categories.css';
export default function CategoryStudent() {
    
        const [subjects, setSubjects] = useState([]);
        const [selectedCategory, setSelectedCategory] = useState('');
        const[selectedSubject, setSelectedSubject]=useState('');
        const[token,setToken]=useState('');
   
        const [email, setEmail]=useState('');
        const [test,setTest]=useState('');
        const location=useLocation();
        const navigate= useNavigate();
        const [sub,setSss]=useState('');

      const [testid,setTestId]=useState([]);
      useEffect(()=>{
       setTestId(location.state.data)
      },[])
      
      
useEffect(() => {
  if(localStorage.getItem('data')==null)
  {
    toast.error("Please, Login first")
    return( navigate("/login") );
  }
  const userData=JSON.parse(localStorage.getItem('data')); 
    setToken(userData.token);
    setEmail(userData.user.email);
    console.log(token);
  }, []);
        

        useEffect(() => {
          // Fetch data from the backend and set it to the 'subjects' state variable
          const fetchData = async () => {
            try {
               
                await axios.get('http://localhost:8080/getallSub')
                    .then(response => setSubjects(response.data))
              // console.log(subjects)
            } catch (error) {
              console.error('Error fetching subject data:', error);
            }
          };
      
          fetchData();
        }, []);
        const [maxximum,setMaximum]=useState('');
        function sendData( maxVal){
          // console.log("Maximum value final send:"+maxVal)
        //  navigate('/ques', { state: { selectedSubject ,maxVal} });
        }
        
        
         async function sample(maxVal)
          {
            
            try{
            const response = await  axios.get(`http://localhost:8080/ques/findset/${selectedSubject}/${maxVal}`,
              {headers : {Authorization: `Bearer ${token}`}}
                  )
                  console.log("Length:"+response.data.length);
                  
                  setTest(response.data)
                  if(response.data.length >= 10 && response.data.length <= 20)
                  {
                    setMaximum(maxVal);
                    sendData(maxVal);
                  }
                  else
                  {
                    alert("You gave all test of Seleted Subject or no more test available");
                  }

           }catch{
            console.log();
           }
           console.log("Test data:"+test)
          }

       function checkTsetSet(e){
            sample(e+1);
        }

          const [findSetinDb,SetFindSetinDB]=useState([]);

        const getAllSetinDB= async() =>{
            console.log("Start working:"+ findSetinDb);
           
          }


         async function fetchMCcard  ()  {
          try {
            const response = await axios.get(`http://localhost:8080/ques/findOneQ/${selectedSubject}`
          ,{headers : {Authorization: `Bearer ${token}`}}
          );
          // .then(response=>{SetFindSetinDB(response.data)});
          SetFindSetinDB(response.data);
          console.log(response.data[0].examSet);
          
          // const DataLength=response.data.length;
          // var arr=[];
          //   var i=0,j=0;
          //   while(i < DataLength)
          //   {
          //     arr[i]=response.data[i];
          //    console.log("From Array"+arr[i]);
          //     // console.log("FRom data:"+response.data[i]);
          //     i++;
          //   }

        //  getAllSetinDB();
          // setQuestion(response.data);
          // //console.log(response.data[0].examSet);
          // setTestset(response.data[0].examSet);
          // setSelectedAnswers(new Array(response.data.length).fill(null));
          } catch (error) {
          toast.error('Server error!');
          }
          };


       
          function StartTest(){
           var i=0;
           var j=0;
           var arr=[];
            // console.log("Selected subject:"+selectedSubject)
            // console.log(testid);
            while(i < testid.length){
              if(testid[i].subject === selectedSubject)
              {
                arr[j]=testid[i].testid;
                 //console.log("Selected test:"+testid[i].testid);
                j++;
              }
              i++;
            }
            fetchMCcard();
            console.log("Find All quetion")
            getAllSetinDB();
            if(arr.length === 0)
            {
              
              checkTsetSet(0);
            }
            else{
            var maxi=Math.max(...arr);
            checkTsetSet(maxi);

            console.log("Max nuber:"+ (maxi+1));
            }
            // navigate('/ques', { state: { sub } });
          }

        const handleSubjectChande=(e)=>{
          setSelectedSubject(e.target.value);
          setSss(e.target.value)
          // console.log("value:"+e.target.value);
        }
      
        return (
          <>
            <div className="header">
        <div className="logo" style={{ color: 'Cyan' }}>
            <b>
                <i>Quizzie-Q</i>
            </b>
        </div>
        </div>
        <div className="categ">
        <div className="card">
                <h2 className="welcome">Welcome Student!</h2>
                <div className="content">
                    <p>
                        This is an MCQ assessment page where you can choose a category and a corresponding topic to take an
                        assessment. Follow the instructions below to get started.
                    </p>
                </div>
        
        
        <div className="form">
            <select className="input" value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)}>
              <option value="">Select a category</option>
              {subjects.map((subject) => (
                <option key={subject.categories} value={subject.categories}>
                  {subject.categories}
                </option>
              ))}
            </select>
            <select className="input" value={selectedSubject} onChange={handleSubjectChande}>
            <option value="">Select a Subject</option>
              {subjects
                .filter((subject) => subject.categories === selectedCategory)
                .map((subject) => (
                  
                  <option key={subject.subName} value={subject.subName}>
                    {subject.subName}
                    
                  </option>
                ))}
            </select>
            {selectedSubject && (
                                <div>
                                    <h4 className="sub-option">Selected sub-option: {selectedSubject}</h4>
                                    <div className="sub-option-content">
                                        <p>
                                            To take an assessment in {selectedSubject}, please click the "Go to Test" button below. You will be
                                            presented with a series of multiple-choice questions to answer.
                                        </p>
                                        <p>
                                            Make sure you are prepared and have studied the relevant material before proceeding. Once you
                                            start the assessment, you will not be able to go back or change your answers.
                                        </p>
                                    </div>
                                </div>
                            )}
            <button type="submit" onClick={()=>StartTest()}>Start test</button>
          </div>
          </div>
          </div>
          </>
        );
      };
      
