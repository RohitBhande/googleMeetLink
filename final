import java.io.IOException;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
@CrossOrigin(origins= "http://localhost:3000")
public class MeetLinkController {
	
	  @PostMapping("/meet-link")
	  public String generateMeetLink(@RequestBody MeetLinkRequest request) throws IOException {
	    return MeetLinkGenerator.generateMeetLink(request.getStartTime());
	  }
	
}


package com.org.application.googleMeet;

public class MeetLinkRequest {

	private String startTime;
	
	public String getStartTime() {
		return startTime;
	}
	public void setStartTime(String startTime) {
		this.startTime = startTime;
	}
}



package com.org.application.googleMeet;

import java.io.FileInputStream;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Collections;
import java.util.Date;

import org.hibernate.internal.build.AllowSysOut;
import org.springframework.format.annotation.DateTimeFormat;

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.DateTime;
import com.google.api.services.calendar.Calendar;
import com.google.api.services.calendar.CalendarScopes;
import com.google.api.services.calendar.model.ConferenceData;
import com.google.api.services.calendar.model.ConferenceSolutionKey;
import com.google.api.services.calendar.model.CreateConferenceRequest;
import com.google.api.services.calendar.model.Event;
import com.google.api.services.calendar.model.EventDateTime;

public class MeetLinkGenerator {

	public static String generateMeetLink(String startTime) throws IOException {

		System.out.println("start time"+startTime+"end");
		// Initialize the Google Calendar service
		Calendar service = getCalendarService();
		System.out.println("1.In search of app nmae:");
		// Create a new event with the given start time
		Event event = new Event();
		event.setSummary("Meeting");
		event.setLocation("Online");
		System.out.println("2.In search of app nmae:");
		DateTime startDateTime = new DateTime(getFormattedDate(startTime));
		System.out.println("5.In search of app nmae:");
		EventDateTime start = new EventDateTime().setDateTime(startDateTime).setTimeZone("Asia/Kolkata");
		System.out.println("6.In search of app nmae:");
		event.setStart(start);
		System.out.println("4.In search of app nmae:");
		// Add one hour to the start time for the end time
		DateTime endDateTime = startDateTime;
		EventDateTime end = new EventDateTime().setDateTime(endDateTime).setTimeZone("Asia/Kolkata");
		event.setEnd(end);
		
		System.out.println("3.In search of app nmae:");
		// Set up the Google Meet conference details
		ConferenceData objConferenceData = new ConferenceData();
		CreateConferenceRequest createConferenceRequest = new CreateConferenceRequest();
		ConferenceSolutionKey conferenceSolutionKey = new ConferenceSolutionKey().setType("hangoutsMeet");

		createConferenceRequest.setRequestId("123456789");

		createConferenceRequest.setConferenceSolutionKey(conferenceSolutionKey);
		objConferenceData.setCreateRequest(createConferenceRequest);
		event.setConferenceData(objConferenceData);

		// Insert the event
		event = service.events().insert("primary", event).execute();

		// Generate the Meet link
		String meetLink = event.getHangoutLink();
		return meetLink;
	}

	private static String getFormattedDate(String time) {
		try {
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm");
			LocalDateTime localDateTime = LocalDateTime.parse(time, formatter);
			Instant instant = localDateTime.atZone(ZoneId.systemDefault()).toInstant();

			// Format Instant as RFC 3339 compliant string
			DateTimeFormatter rfc3339Formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
			String formattedDate = rfc3339Formatter.format(instant);

			return formattedDate;
			} catch (DateTimeParseException e) {
			e.printStackTrace();
			return null; // or handle the error as appropriate
			}
	}
	private static Calendar getCalendarService() throws IOException {
		// Initialize the Google Calendar API client
		try {
			NetHttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
			GoogleCredential credential = GoogleCredential.fromStream(new FileInputStream("credentials.json"))
					.createScoped(Collections.singleton(CalendarScopes.CALENDAR));
			Calendar service = new Calendar.Builder(httpTransport, JacksonFactory.getDefaultInstance(), credential)
					.build();
			return service;
		} catch (IOException | GeneralSecurityException e) {
			e.printStackTrace();
			return null;
		}
	}

}



