@RestController
public class UserController {

    @GetMapping("/user")
    public ResponseEntity<String> getUser(@RequestParam String email, @RequestParam String password) {
        // Implement logic to retrieve user with given email and password
        // ...
        return ResponseEntity.ok("User retrieved successfully.");
    }

    @PostMapping("/user")
    public ResponseEntity<String> createUser(@RequestParam String email, @RequestParam String password) {
        // Implement logic to create user with given email and password
        // ...
        return ResponseEntity.ok("User created successfully.");
    }
}



@Service
public class UserService {

    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public User getUserByEmailAndPassword(String email, String password) {
        return userRepository.findByEmailAndPassword(email, password);
    }

    public User createUser(String email, String password) {
        User user = new User(email, password);
        return userRepository.save(user);
    }
}



@RestController
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/user")
    public ResponseEntity<String> getUser(@RequestParam String email, @RequestParam String password) {
        User user = userService.getUserByEmailAndPassword(email, password);
        if (user == null) {
            return ResponseEntity.notFound().build();
        } else {
            return ResponseEntity.ok("User retrieved successfully.");
        }
    }

    @PostMapping("/user")
    public ResponseEntity<String> createUser(@RequestParam String email, @RequestParam String password) {
        User user = userService.createUser(email, password);
        return ResponseEntity.ok("User created successfully.");
    }
}




