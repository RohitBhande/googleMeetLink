import React, { createContext, useState } from 'react';

export const UserContext = createContext();

export const UserProvider = ({ children }) => {

  const [username, setUsername] = useState('');

  return (

    <UserContext.Provider value={{ username, setUsername }}>

      {children}

    </UserContext.Provider>

  );

};


import React, { useState, useContext } from 'react';

import { useNavigate } from 'react-router-dom';

import { UserContext } from './UserContext';

function LoginPage() {

  const { setUsername } = useContext(UserContext);

  const navigate = useNavigate();

  const [usernameInput, setUsernameInput] = useState('');

  const handleLogin = () => {

    // Perform login logic

    // ...

    // Update the username in the user context

    setUsername(usernameInput);

    // Redirect to the register page

    navigate('/register');

  };

  return (

    <div>

      <h1>Login Page</h1>

      <input

        type="text"

        placeholder="Username"

        value={usernameInput}

        onChange={(e) => setUsernameInput(e.target.value)}

      />

      <button onClick={handleLogin}>Login</button>

    </div>

  );

}

export default LoginPage;


import React, { useContext } from 'react';

import { UserContext } from './UserContext';

function RegisterPage() {

  const { username } = useContext(UserContext);

  return (

    <div>

      <h1>Register Page</h1>

      <p>Welcome, {username}!</p>

      {/* Other registration form elements */}

    </div>

  );

}

export default RegisterPage;



















import React, { useState } from 'react';

import axios from 'axios';

const RegistrationForm = () => {

  const [email, setEmail] = useState('');

  const [password, setPassword] = useState('');

  const [role, setRole] = useState('');

  const handleSubmit = async (e) => {

    e.preventDefault();

    try {

      const response = await axios.post('/api/users/register', {

        email,

        password,

        role

      });

      console.log(response.data); // Handle successful registration

    } catch (error) {

      console.error(error); // Handle registration error

    }

  };

  return (

    <div>

      <h2>Register User</h2>

      <form onSubmit={handleSubmit}>

        <div>

          <label htmlFor="email">Email</label>

          <input

            type="email"

            id="email"

            value={email}

            onChange={(e) => setEmail(e.target.value)}

          />

        </div>

        <div>

          <label htmlFor="password">Password</label>

          <input

            type="password"

            id="password"

            value={password}

            onChange={(e) => setPassword(e.target.value)}

          />

        </div>

        <div>

          <label htmlFor="role">Role</label>

          <select id="role" value={role} onChange={(e) => setRole(e.target.value)}>

            <option value="">Select Role</option>

            <option value="admin">Admin</option>

            <option value="user">User</option>

          </select>

        </div>

        <button type="submit">Register</button>

      </form>

    </div>

  );

};

export default RegistrationForm;










@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private UserRepository userRepository;

    @GetMapping("/login")
    public ResponseEntity<String> login(@RequestHeader("Authorization") String authHeader) {
        // Extract the base64 encoded username and password from the Authorization header
        String base64Credentials = authHeader.substring("Basic".length()).trim();
        String credentials = new String(Base64.getDecoder().decode(base64Credentials));

        // Split the username and password
        String[] parts = credentials.split(":", 2);
        String username = parts[0];
        String password = parts[1];

        // Retrieve the user from the database using the provided username
        User user = userRepository.findByUsername(username);

        if (user == null) {
            // User not found
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
        }

        if (!password.equals(user.getPassword())) {
            // Invalid password
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
        }

        // Authentication successful
        return ResponseEntity.ok("Authentication successful");
    }
}





@Configuration

@EnableWebSecurity

public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override

    protected void configure(HttpSecurity http) throws Exception {

        http

            .authorizeRequests()

                .antMatchers("/api/auth/login").permitAll()

                .anyRequest().authenticated()

                .and()

            .httpBasic();

    }

}






@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private UserDetailsService userDetailsService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestBody LoginRequest loginRequest) {
        String username = loginRequest.getUsername();
        String password = loginRequest.getPassword();

        UserDetails userDetails = userDetailsService.loadUserByUsername(username);

        if (userDetails == null) {
            // User not found
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
        }

        if (!passwordEncoder.matches(password, userDetails.getPassword())) {
            // Invalid password
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
        }

        // Authentication successful
        return ResponseEntity.ok("Authentication successful");
    }
}

@Service
public class UserDetailsServiceImpl implements UserDetailsService {

    @Autowired
    private UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username);

        if (user == null) {
            throw new UsernameNotFoundException("User not found");
        }

        return new org.springframework.security.core.userdetails.User(
                user.getUsername(),
                user.getPassword(),
                Collections.emptyList()
        );
    }
}






@Autowired

private PasswordEncoder passwordEncoder;

// ...

String rawPassword = loginRequest.getPassword();

String encodedPassword = passwordEncoder.encode(rawPassword);

User user = new User();

user.setUsername(loginRequest.getUsername());

user.setPassword(encodedPassword);

userRepository.save(user);







import React, { useState } from 'react';

import axios from 'axios';

const Login = () => {

  const [username, setUsername] = useState('');

  const [password, setPassword] = useState('');

  const [error, setError] = useState('');

  const handleSubmit = async (e) => {

    e.preventDefault();

    setError('');

    try {

      const response = await axios.post('/api/auth/login', {

        username,

        password

      });

      console.log(response.data); // Handle successful authentication

    } catch (error) {

      setError('Invalid credentials'); // Handle authentication error

    }

  };

  return (

    <div>

      <h2>Login</h2>

      {error && <p>{error}</p>}

      <form onSubmit={handleSubmit}>

        <div>

          <label htmlFor="username">Username</label>

          <input

            type="text"

            id="username"

            value={username}

            onChange={(e) => setUsername(e.target.value)}

          />

        </div>

        <div>

          <label htmlFor="password">Password</label>

          <input

            type="password"

            id="password"

            value={password}

            onChange={(e) => setPassword(e.target.value)}

          />

        </div>

        <button type="submit">Login</button>

      </form>

    </div>

  );

};

export default Login;
