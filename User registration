@RestController
public class UserController {

    @GetMapping("/user")
    public ResponseEntity<String> getUser(@RequestParam String email, @RequestParam String password) {
        // Implement logic to retrieve user with given email and password
        // ...
        return ResponseEntity.ok("User retrieved successfully.");
    }

    @PostMapping("/user")
    public ResponseEntity<String> createUser(@RequestParam String email, @RequestParam String password) {
        // Implement logic to create user with given email and password
        // ...
        return ResponseEntity.ok("User created successfully.");
    }
}



@Service
public class UserService {

    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public User getUserByEmailAndPassword(String email, String password) {
        return userRepository.findByEmailAndPassword(email, password);
    }

    public User createUser(String email, String password) {
        User user = new User(email, password);
        return userRepository.save(user);
    }
}



@RestController
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/user")
    public ResponseEntity<String> getUser(@RequestParam String email, @RequestParam String password) {
        User user = userService.getUserByEmailAndPassword(email, password);
        if (user == null) {
            return ResponseEntity.notFound().build();
        } else {
            return ResponseEntity.ok("User retrieved successfully.");
        }
    }

    @PostMapping("/user")
    public ResponseEntity<String> createUser(@RequestParam String email, @RequestParam String password) {
        User user = userService.createUser(email, password);
        return ResponseEntity.ok("User created successfully.");
    }
}


@RestController
@RequestMapping("/api/users")
public class UserController {
    @Autowired
    private UserRepository userRepository;

    @PostMapping("/register")
    public ResponseEntity<?> registerUser(@Valid @RequestBody User user) {
        if (userRepository.findByEmail(user.getEmail()) != null) {
            throw new BadRequestException("Email address already in use.");
        }
        User savedUser = userRepository.save(user);
        return ResponseEntity.ok(savedUser);
    }
}


import React, { useState } from 'react';
import { Form, Button } from 'react-bootstrap';
import axios from 'axios';

const RegisterForm = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (event) => {
    event.preventDefault();
    try {
      const response = await axios.post('/api/users/register', {
        email,
        password,
      });
      console.log(response.data);
    } catch (error) {
      console.error(error.response.data.message);
    }
  };

  return (
    <Form onSubmit={handleSubmit}>
      <Form.Group controlId="formBasicEmail">
        <Form.Label>Email address</Form.Label>
        <Form.Control
          type="email"
          placeholder="Enter email"
          value={email}
          onChange={(event) => setEmail(event.target.value)}
        />
      </Form.Group>

      <Form.Group controlId="formBasicPassword">
        <Form.Label>Password</Form.Label>
        <Form.Control
          type="password"
          placeholder="Password"
          value={password}
          onChange={(event) => setPassword(event.target.value)}
        />
      </Form.Group>

      <Button variant="primary" type="submit">
        Register
      </Button>
    </Form>
  );
};

export default RegisterForm;


import React from 'react';
import RegisterForm from './components/RegisterForm';

const App = () => {
  return (
    <div className="container">
      <RegisterForm />
    </div>
  );
};

export default App;
