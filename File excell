import React, { useEffect, useState } from 'react';
import axios from 'axios';

const QuizComponent = () => {
  const [questions, setQuestions] = useState([]);
  const [selectedAnswers, setSelectedAnswers] = useState([]);
  const [result, setResult] = useState(null);

  useEffect(() => {
    // Make API call to retrieve questions and answers
    axios.get('/api/questions')
      .then(response => {
        setQuestions(response.data);
      })
      .catch(error => {
        console.error('Error fetching questions:', error);
      });
  }, []);

  const handleAnswerSelection = (questionIndex, answerIndex) => {
    const updatedAnswers = [...selectedAnswers];
    updatedAnswers[questionIndex] = answerIndex;
    setSelectedAnswers(updatedAnswers);
  };

  const calculateResult = () => {
    let score = 0;
    questions.forEach((question, index) => {
      if (selectedAnswers[index] === question.correctAnswerIndex) {
        score++;
      }
    });
    const percentageScore = (score / questions.length) * 100;
    setResult(percentageScore);
  };

  return (
    <div>
      {questions.map((question, index) => (
        <div key={index}>
          <h3>{question.title}</h3>
          <ul>
            {question.answers.map((answer, answerIndex) => (
              <li key={answerIndex}>
                <label>
                  <input
                    type="radio"
                    name={`question-${index}`}
                    value={answerIndex}
                    checked={selectedAnswers[index] === answerIndex}
                    onChange={() => handleAnswerSelection(index, answerIndex)}
                  />
                  {answer}
                </label>
              </li>
            ))}
          </ul>
        </div>
      ))}
      <button onClick={calculateResult}>Submit</button>
      {result !== null && <p>Your score: {result}%</p>}
    </div>
  );
};

export default QuizComponent;









import React, { useState } from 'react';
import axios from 'axios';

const FileUploadComponent = () => {
  const [selectedFile, setSelectedFile] = useState(null);

  const handleFileChange = (event) => {
    setSelectedFile(event.target.files[0]);
  };

  const handleUpload = () => {
    const formData = new FormData();
    formData.append('file', selectedFile);

    axios.post('http://localhost:8080/upload', formData)
      .then((response) => {
        console.log('File uploaded successfully');
        // Handle any success actions
      })
      .catch((error) => {
        console.error('Error uploading file:', error);
        // Handle any error actions
      });
  };

  return (
    <div>
      <input type="file" onChange={handleFileChange} />
      <button onClick={handleUpload}>Upload</button>
    </div>
  );
};

export default FileUploadComponent;








no<!-- Excel file manipulation -->
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi</artifactId>
    <version>4.1.2</version>
</dependency>
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>4.1.2</version>
</dependency>

<!-- MySQL database -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
</dependency>




@Service
public class ExcelService {
    
    public void uploadAndStoreData(MultipartFile file) throws IOException {
        // Read the Excel file and extract data
        Workbook workbook = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = workbook.getSheetAt(0); // Assuming data is in the first sheet
        
        // Iterate over rows and process the data
        for (Row row : sheet) {
            // Extract data from each cell in the row and store it in the database
            // You can use row.getCell(columnIndex) to access data from each cell
            
            // Example: Assuming the data is in columns A and B
            String columnAData = row.getCell(0).getStringCellValue();
            String columnBData = row.getCell(1).getStringCellValue();
            
            // Store the data in the database using a repository
        }
        
        workbook.close();
    }
}





@Service
public class ExcelService {
    
    public void uploadAndStoreData(MultipartFile file) throws IOException {
        // Read the Excel file and extract data
        Workbook workbook = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = workbook.getSheetAt(0); // Assuming data is in the first sheet
        
        // Iterate over rows and process the data
        for (Row row : sheet) {
            // Extract data from each cell in the row and store it in the database
            // You can use row.getCell(columnIndex) to access data from each cell
            
            // Example: Assuming the data is in columns A and B
            String columnAData = row.getCell(0).getStringCellValue();
            String columnBData = row.getCell(1).getStringCellValue();
            
            // Store the data in the database using a repository
        }
        
        workbook.close();
    }
}




@RestController
public class FileUploadController {
    
    @Autowired
    private ExcelService excelService;
    
    @PostMapping("/upload")
    public ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file) {
        try {
            // Call the service to upload and store the data
            excelService.uploadAndStoreData(file);
            
            return ResponseEntity.ok("File uploaded successfully.");
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to upload the file.");
        }
    }
}







