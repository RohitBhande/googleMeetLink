import React, { useState, useEffect } from 'react';

const SubjectDropdown = () => {
  const [subjects, setSubjects] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('');

  useEffect(() => {
    // Fetch data from the backend and set it to the 'subjects' state variable
    const fetchData = async () => {
      try {
        const response = await fetch('/api/subjects');
        const data = await response.json();
        setSubjects(data);
      } catch (error) {
        console.error('Error fetching subject data:', error);
      }
    };

    fetchData();
  }, []);

  return (
    <div>
      <select value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)}>
        <option value="">Select a category</option>
        {subjects.map((subject) => (
          <option key={subject.category} value={subject.category}>
            {subject.category}
          </option>
        ))}
      </select>
      <select>
        {subjects
          .filter((subject) => subject.category === selectedCategory)
          .map((subject) => (
            <option key={subject.name} value={subject.name}>
              {subject.name}
            </option>
          ))}
      </select>
    </div>
  );
};

export default SubjectDropdown;














import React, { useState, useEffect } from 'react';

const MyComponent = () => {
  const [originalArray, setOriginalArray] = useState([]);
  const [filteredSet, setFilteredSet] = useState(new Set());

  useEffect(() => {
    // Populate the originalArray with data (e.g., fetching data from an API)
    // setOriginalArray([...]); // Update the originalArray here
  }, []);

  useEffect(() => {
    const filteredArray = originalArray.filter(item => /* Your condition here */);
    const newFilteredSet = new Set(filteredArray);
    setFilteredSet(newFilteredSet);
  }, [originalArray]);

  return (
    <div>
      {/* Render your component using the filteredSet */}
    </div>
  );
};

export default MyComponent;









const checkNumberInDatabase = (number) => {






// Make the GET request to your backend API
  axios.get(`/api/checkNumber?number=${number}`)
    .then(response => {
      const isNumberPresent = response.data.exists;
      if (isNumberPresent) {
        // If the number is already present, generate a new number and check again
        const newNumber = getRandomNumber();
        checkNumberInDatabase(newNumber);
      } else {
        // If the number is not present, execute the remaining code
        executeRemainingCode(number);
      }
    })
    .catch(error => {
      // Handle the error
    });
};
